실습 : passward : 다음주이다
MMO게임 (물량) -> 최적화 -> 동접 -> BroadCast

- c++로 AI구현은 시간도 많이 걸릴 뿐더러 어렵다.

-인공지능은 주로 스크립트로 구현
-하지만 스크립트는 성능이 느리기때문에 
길찾기 알고리즘같은거나 적 인식은 C로 구현


*적 인식
-플레이어의 생성,이동이 NPC를 깨워주는것.
-플레이어의 이동을 근처 NPC에만 broadcast -> 서버에 막대한 부하를 막을 수 있음
-NPC 리스폰시에도 검사 필요

-능동적 AI는 만들면 안된다.

*NPC 구현
-NPC 서버를 따로 구현
1.장점 : -안정성: NPC모듈이 죽어도 서버 정상 작동 -> 플레이어 데이터 손실을 막을 수 있음
           -.부하 분산: 메모리 &CPU

2.단점: -통신 OVERHEAD 
	1.공유 메모리 참조로 끝날일이 패킷통신으로 악화
	2. 서버 입장에서는 NPC도 플레이어와 비슷한 부하

- 몇년전만해도 NPC서버 분리하지 않고 메인서버에서 한다.
하지만 최근에는 또 생동감 있는 NPC들을 구현하려면 인던서버가 한다.


*길찾기
-이동
클라에서 이동을 하고 서버에게 이동했다고 알려준다. 
-> 서버에서 검사를 해야할게 플레이어 속도, 근처 장애물 등을 검사해서 
맞으면 다른 클라에게 이동된 클라이언트 위치를 보내줘야함. 

-> WASD이동시 길찾기 알고리즘 불필요
->마우스 클릭 이동은 길찾기 알고리즘이 필요 -> 하지만 클라에서 함

->NPC 길찾기는 서버에서 해야함.
-서버가 지형과 장애물을 알아야 한다.

*클라이언트는 플레이어가 서있는 주위만 메모리 로딩해서 지형 검사를 하면되지만
 서버는 모든 지형을 로딩해야함.

*지형 구현
-2D지형
1. 타일 방식
2. 2D 배열로 지형 표현 -> O(1)
3. 이동 가능 불가능 FLAG 이 CELL마다 존재 -> 메모리 절약하기 위해서
4. 서버 안에서의 모든 OBJECT 의 좌표는 정수
5. 자로 잰듯한 줄서기(만) 가능
6. 2D 이미지를 토대로 사람이 TILE을 작성 - 주로 레벨 디자이너

EX > 리니지1, 던파,바람의 나라, 스타 1,2, 디아블로1,2,3 , 리니지 2레볼루션 -> 몇몇은 클라는 3D지만 서버는 2D


-3D 지형
1. 확장 타일
 1> Tile 방식
 2> 3D배열로 지형 표현
     -> 배열 구현시 메모리 낭비가 심해서 Sparce Matrix 로 표현 하지만 O(n) 걸림
     -> 많은 부분이 단층지형이므로 2D타일을 사용하고 복층 구조로 된 일부 부분에 필요한 데이터만 다른 메모리 주소에 할당한다.
     -> 단점:충돌이 부자연스럽다. 경사를 졌거나 동그란 벽을 만들면 안됨, 벽이 각진 던전만 만들어야함
 
2. 3D 지형 폴리곤 방식
 1> 클라이언트의 visual Data 를 그대로 사용
    ->서버에서는 메시 충돌검사가 아닌 별도의 충돌체 검사만 한다. 
 2> 클라이언트와 비슷한 방법으로 이동 가능 검사
    -> 물리 엔진 필요
    -> 지형 표현 정밀도 증가
 
 








