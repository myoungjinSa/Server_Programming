*멀티 쓰레드에서의 자원 공유 
-모든 자원 (메모리,파일 핸들,소켓, 윈도우 핸들, 다이렉트x 디바이스)는 공유된다.

*GameClient -> Heterogeneous 멀티 쓰레드 
-장점: 
-단점: 각 역할에서 가장 느린 쓰레드를 다른 쓰레드가 기다려야함.(Bottle neck)
ex> 렌더링 쓰레드, 물리엔진 쓰레드,애니메이션 쓰레드,사운드 쓰레드

*GameServer는 Homogenous 멀티 쓰레드
-장점: Bottle neck 이 없다.
-패킷 하나를 한 조각의 작업으로 생각

*주의점:
-코어 개수 1.5배 정도 만들어 놓는다. 

*윈도우가 알아서 쓰레드를 멀티코어에 잘 분배해준다.

*Affinity란? -> 한 쓰레드의 작업에서 어느 한 코어에서 계속적으로 실행해준다 -> 윈도우가 알아서 잘 해줌

*윈도우에서 쓰레드는 커널 레벨 쓰레드임 -> 그래서 쓰레드를 멀티코어에 잘 분배 해준다.


*c++11의 표준을 따르는 프로그래밍 방식을 사용하면 어떤 os에서든 상관없이
멀티쓰레드 프로그래밍이 사용 가능하다.


*join() -> 쓰레드가 종료할 때 까지 기다리는 함수

*volatile -> Release모드에서 최적화(즉, 한단계 한단계 빼먹지 말고) 실행해라.

*lock() -> 다른 쓰레드가 실행하고 있는지 검사한다음에 다른 쓰레드가 실행하고 있으면 기다린다.

