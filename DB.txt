-FRAMEWORK -> 1. network
	       -> 2. thread

-CONTENTS   -> NPC - 1. 길찾기
		    - 2. timer
		    - 3. 지형
	      -> PLAYER - STATUS


*게임에서 많이 사용되는 DB 
1. CISAM(C Indexed Sequential Access Method)
	*DB가 아닌 단순한 파일 시스템 - EX > 바람의 나라

2. MySQL                              =>			 Maria DB
	*Free Software - >Oracle 이 사서 이제는 공짜가 아님 
	* Simple but fast, 리눅스 운영체제에서 많이 사용
	* 성능도 나쁘지 않다
	* 단점 :
3. MSSQL
	*MicroSoft, 가장 많이 사용 EX> 리니지

4. Oracle 
	*장점 : 오라클 경험자 많음 , tool이 많이 있음, 
	*단점 : 엄청 비쌈 , 수출이 어려움 (퍼블리셔가 비싸서 퇴짜놓음)

5. Memcached 
	*메모리 DB -DB가느린 이유는 FILE I/O를 하기때문인데 Memcached는 디스크 I/O를 하지 않는 DB임
	* 이게 디스크IO를 하지 않는게 아니고 메모리에 최대한 많은 용량을 올려놓는거

6. NoSQL
	*기존에 SQL과 다른 방식인 db
	*고속 대용량 데이터 베이스
	* Transaction 처리를 희생하고 속도와 대용량(자료의 분산 저장으로)을 얻음
	* SQL에서 일부의 기능만 제공을 함. 



*Redis - 게임회사에서 가장 많이 사용함

요즘은 DB도 용도별로 분리해서 저장하는 경우도 많음


*데이터 베이스의 사용
-게임 서버는 db와 분리가 되어야하기 때문에 = >네트워크를 통한 접속 -> 별도의 컴퓨터에서 db는 동작하기 때문에
1. Text Based Socket -> string으로 주고 받기 때문에 느리고 오버헤드가 큼
2. ODBC	-> DB 표준 방식, 호환성과 성능이 좋음

-서버에서는 간단한 쿼리언어만 사용함 - 왜냐하면 복잡한 쿼리언어는 db에서 시간 소요가 크다는 의미랑 같다.


*DB를 쓰면 좋은 점
- 다른 프로그램으로도 데이터를 다룰 수 있다.(EX> GM Tool, 사업부,모바일 클라이언트등의 프로그램에서도 db엑세스를 할 수 있어야해서)

- 각종 툴이나 browser를 사용할 수 있다.


*DB에 저장되는 데이터
-과금 정보 - 현금 결제 정보
-캐릭터 정보 - 스킬, 퀘스트, 길드 정보
-아이템 정보 - 아이템정보는 캐릭터 정보와 분리되어있다. -> 왜냐하면 캐릭터 정보의 크기가 커지기때문에
	-> 인벤토리 정보 포함(owner 개념)
-월드 정보 - 성주, 집주인, 대회 우승 기록,게시판...
-경매장 정보 - 
-우편 정보
-게임 로그 - 상거래, PK, 채팅,아이템 습득 / 사용






*DB에 들어가면 안되는 데이터
-고정된 정보는 넣을 필요 없음
1. NPC 정보

2. 월드 지형 정보 - 바뀌지 않는 지형일 경우만. (마인크래프트 같은거는 있어야함)

3. 아이템 속성 정보 -> 속성정보는 바뀌지 않기 때문에.



*서버는 언제 DB에 접근하는가?

-기본 
1. 캐릭터 login/logout ->  로그아웃할때 서버는 db에 저장하고 메모리에서 지운다.
2. 서버 shutdown	-> 모든걸 저장해야함.

-추가적 : "서버 다운에도 안전하게"

*그때 그때 : 캐릭터 사이의 아이템 거래

* 주기적 : auto-save

* 그 이외: -중요한 캐릭터 데이터 변경
	- 캐릭터의 zone이동시


별 중요하지 않은 데이터는 메모리에 올려 놓고 주기적으로 DB에 저장함.
* 플레이어 xy좌표는 주기적으로 한번 DB에 저장한다.
* 플레이어 경험치도 주기적으로 저장함. 

중요한 데이터는 메모리의 데이터가 저장되기 전에 DB부터 저장되야 함.
* DB에 넣고 인벤토리에 들어와야함. 


*Stored Procedure(내장 함수) 
-일련의 동작들을 sql로 ㅍ로그래밍해서 DB서버에 저장해 놓은 것

-DB 회사에서 미리 만들어놓았다.

-내장함수를 반드시 사용해야함, -> 사용하고 안하고의 차이가 매우 크다.

-장점 
1. 성능향상
2. 보안 -> 게임서버 소스코드가 유출되도 SQL쿼리가 어떻게 되어있는지 알수 없어서 디비 해킹을 방지할수있다.
3. Transaction구현
4. 네트워크 트래픽 감소

-단점
1. 데이터베이스 열어서 Strored Procedure를 고쳐야함.

 
DBMS 
-> DB MANAGEMENT SYSTEM


1.개체 탐색기
2.데이터베이스
3. 새 데이터베이스 - 추가
4.DB를 만들면 데이터베이스 다이어그램,테이블 외부 리소스 생김
5. 테이블 우클릭 -> 상위 200개 편집 -> 데이터 넣고 -> 쿼리디자이너 -> SQL 실행 -> 데이터를 실제로 넣어짐
6.ODBC 데이터 원본 관리자(64비트)
7. odbc DRIVER 13 for SQL SERVER




*우리 db 에 프로그램 기능 -> 저장 프로시저 (마우스 우 클릭) -> 

*주의 사항
-디비 다른 계정 사용하기

우리 pc ->관리자 -> 게임 서버 -> odbc ->(윈도우 인증을 통해)-> 다른 PC의 DBMS 

-윈도우 인증이 아닌 Management Studio의 계정으로 db에 접근해야함

-ID ,PW 를 'sa'로 만들면 안됨 -> sa 는 시스템 관리자 권한으로 권한이 너무 막강하다.
- 권한이 너무 막강해서 테이블을 실수로 지울수도 있음

- 또한 게임 마스터 운영툴, 마케팅 툴, 모바일 툴등에서 접근을 하기 때문에 그 툴마다 id,pw를 따로줘야함


*DB 백업 -> DB 마우스 우클릭 -> 태스크 -> 백업 -> 백업 유형 : 전체 -> 백업 위치는 우리가 맘대로 바꾸면 안된다.(왜냐하면 DB서버가 읽고 쓰는 경로이기때문)



