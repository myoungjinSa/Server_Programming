*I/O 모델이 필요한 이유
- 비 규칙적인 입출력 관리
- 다중 접속 관리
 ex> 배그는 1초에 20번 클라이언트에게 정보를 한번에 묶어서 보낸다. 월드에 모든 오브젝트의 상태를 보냄

FPS 방식 -> 10명이서 

*게임 서버의 접속
- 정해지지 않은 동작 순서
  1. 그래도 멈추지 않아야 하는 게임
-수 천 개의 접속
-상대적으로 낮은 접속당 BandWidth
  1. 효율적 자원관리 필요 (CPU,메모리,네트워크 대역)
  2. 필요할때 리시브를 해야함.

*I/O모델을 해야하는 이유
1. 불규칙
2. 다중접속
-----------------------------------------------------------------------------------------------------------------
동기식 I/O

*스레드 : 코드 ,DATA,HEAP은 공유, STACK은 스레드 마다 개별로 갖고있음

1MB * 5000클라이언트 -> 5GB 스택이 필요 -> 캐시에 안들어가기 때문에 캐시미스가 많이나서 효율 떨어짐



*Non-blocking I/O

-Socket의 모드를 blocking 에서 non-blocking 으로 변환
-Socket 함수 호출이 즉시 끝나지 않을 때
	1.WSAEWOULDBLOCK(데이터 없음을 의미)에러를 내고 끝낸다.
	2.기다리지 않는다.
-Busy Waiting 
	1.recv를 돌아가면서 반복 check해야함
	2.cpu낭비-> 성능 저하


*Select모델
-동기식 select
데이터가 와서 읽어야할 소켓들을 모두 처리한다.

-UNIX 시절부터 내려온 고전적인 I/O모델
-UNIX나 linux에서는 socket 개수의 한계 존재
	*unix:64,linux:1024
-Socket 의 개수가 많아질수록 성능 저하 증가
	*linear search

*WSAAsyncSelect모델
-비동기식 select
-클라이언트 만들때는 이 모델이면 충분하다.
-클라이언트에 많이 쓰임
-윈도우 필요
	*윈도우 필요
	*윈도우 메시지 큐를 사용 -> 성능 느림
-주로 클라는 FD_READ,FD_WRITE,FD_CLOSE 세개만 씀

*WSAEventSelect
-윈도우 없이 동작함
-WSAEVENT == 세마포어

-socket과 event의 array를 만들어서 WSAWaitForMultipleEvents() 의 리턴값으로부터 socket추출
-문제점 :소켓의 개수 64개 제한
	1. 멀티 스레드르 사용해서 제한 극복가능.
	   ->스레드는 코어의 개수 이상이되면 오히려 성능 저하됨.


--------------------------------------------------------------------------------------------------------
비동기식 I/O

*Overlapped I/O모델
-Windows 에서 추가된 고성능 I/O모델
-다른 이름으로는 Asynchronous I/O 또는 비동기 I/O
	*리눅스의 경우 BOOST/ASIO 라이브러리로 사용가능
EX> 리눅스 -> epoll , 윈도우 -> Overlapped I/O --> IOCP,RIO

-대용량 공성능 네트워크 서버를 위해서는 필수 기능
-IOCP 도 Overlapped I/O를 사용
-사용 방법이 Select style 의 I/O 모델과 다르다.
-RECV(SOCKET[i],buf[i]) -> 데이터가 날아오면은 버퍼에 담아라라는 명령으로 받아라 명령이 아님
-wait_for_recv_complete_socket()->버퍼에 데이터가 도착한 소켓이 있으면 알려줘라 -> 해싱을 이용해서 검색 과정 없음
-커널버퍼에서 복사하는게 아닌 버퍼[n]개의 바로 데이터가 도착한다.
-동기식은 커널버퍼에 도착한 데이터를 버퍼에 복사하는 과정이 필요하다.
-비동기 데이터 송수신을 할 수 있다.
-소켓 내부 버퍼를 사용하지 않고 직접 사용자 버퍼에서 데이터를 보내고 받을수있다(옵션)
-send와 recv를 호출했을때 패킷 송수신의 완료를 기다리지 않고 send,recv함수 종료
-이때 send와 recv는 단순한 송수신의 시작을 지시하는 함수
-여러번 recv,send를 실행함으로써 여러 소켓에 대한 동시 다발적 recv,send도 가능
	1. 하나의 socket은 하나의 recv만 하나의 버퍼에 가능!!!


-dwFlags : WSA_FLAG_OVERLAPPED -> 비동기로 사용도 가능하고 동기로도 사용 가능함을 의미

typedef struct WSAOVERLAPPED
{
	DWORD Internal		=> 0으로 세팅해주면 됨
	DWORD InternalHigh;	=> 0
	DWORD offset;		=> 0
	DWORD offsetHigh; 	=> 0
	WSAEVENT hEvent;
}



동기 : RECV -> WAIT -> RETURN -> VOZLTCJFL
비동기 : RECV->RETURN-> 다른일 -> CALLBACK(패킷처리) -> 다른일

*비동기? Non-blocking과의 차이는?
-앞의 다중 I/O모델들은 RECV와 SEND의 가능 여부만 비동기(recv,send 해도 되)
-Overlapped는 아예 여러 소켓의 send,recv실행자체를 동시에 수행(recv 끝났다를 알려줌)


*Ovelapped I/O Event 모델
-WSARecv 의 LPWSAOVERLAPPED lpOvelapped 구조체의 WSAEVENT hEvent 사용
-작업 결과 확인 
 1. WSAGetOvelappedResult()

-WSAOVERLAPPED 구조체는 RECV마다 하나씩 있어야함, 공유할수 없음

-문제: 이벤트 제한개수 존재 64개까지 밖에 못함

*Overlapped I/O Callback 모델

-이벤트 제한 개수 없음
-사용하기 편리









 

