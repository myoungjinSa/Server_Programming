npc 패턴이 복잡하거나 특정 npc만 사용하면 스크립트 언어를 사용하는게 좋다

c++에서 자주 사용하는 ai면 c++을 사용하는게 좋다.

스크립트 언어는 다운되지 않는다.


-하스켈 , erlang,Limp,Scheme -> c보다 어려운 스크립트 언어

-Re-entrant -> 여러개의 스레드가 해당 클래스의 메소드를 동시에 호출할때 안정성을 보장해주는 기능
	 	->lock이 필요없음


-lua 가 간단하지만 생산성이 높다고는 할 수 없다. 왜냐하면 기능 구현을 할 게 많다

-python은 제공해주는 기능이 많아서 생산성이 높다.
	- 파이썬의 쓰레드는 user레벨 쓰레드여서  멀티 쓰레드프로그래밍을 해도
	   싱글쓰레드에서 돌아가는 쓰레드다.

-java - 멀티쓰레드도 가능 , 하지만 garbage collection으로 인한 성능이 저하됨

-c# - 멀티쓰레드도 가능, 성능도 좋음 하지만 덩치가 큼


*lua 특징 :1. 간단한 자료구조 : 자료구조가 4가지 종류밖에 없다. boolean,number,string,table
	 2. 모듈의 크기 작다 -> 모듈의 크기가 작기 때문에 오버헤드가 작다. -> 루아는 여러개를 실행해야 하기때문에 메모리 크기가 작은게 큰 장점
	 3. 


*루아를 계속 실행하고 있는게 아니라
*루아언어에 있는 특정함수를 골라서 호출해야함

*A 스타 길찾기는 원래 느린 알고리즘인데 루아로 구현하면 더 느리기때문에 
 c++로 구현해야함.


*루아도 소켓함수가 있긴한데 루아의 iocp가 없고 overlapped io도 없으므로 바람직하지 않다
*그러므로 send패킷은 c를 통해서하고 루아는 c함수를 호출할 수 있어야한다. 

-> lua_register(L,"my_function",my_function) ->c의 my_function함수를 lua 소스코드에서 호출
,c는 잘못된 호출로 인한 것을 방지해야한다.


